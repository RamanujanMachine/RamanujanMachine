import mpmath
import sympy
from unittest import TestCase
from ramanujan.utils.utils import iter_series_items_from_func
from ramanujan.enumerators.RelativeGCFEnumerator import gcf_calculation_to_precision


class TestContinuedFracture(TestCase):
    def setUp(self):
        self.depth = 1000
        self.precision = self.depth * 20

    def _test_large_catalan(self, a_iterator, b_iterator, degree, lhs):
        with mpmath.workdps(self.precision):
            rhs_val, _ = gcf_calculation_to_precision(
                a_iterator, b_iterator, 100, 1000, 7
            )
            rhs_val = mpmath.mpf(rhs_val) / (10**100)
            rhs_str = mpmath.nstr(rhs_val, 100)

            lhs_val = sympy.lambdify((), lhs, "mpmath")()
            lhs_str = mpmath.nstr(lhs_val, 100)

            self.assertEqual(rhs_str, lhs_str)

            diff = abs(lhs_val - rhs_val)
            digits_per_term = -mpmath.log10(diff) / self.depth

            print(
                "convergence rate [digits per term]:  {:.4f}".format(
                    float(digits_per_term)
                )
            )
            print(
                "digits per term / degree:            {:.4f}".format(
                    float(digits_per_term / degree)
                )
            )

    def test_8635(self):
        print("starting test 8635 large catalan expression:")
        B = (
            lambda n: -193273528320
            * (18 * n + 17)
            * (18 * n + 13)
            * (18 * n + 11)
            * (18 * n + 7)
            * (18 * n + 5)
            * (18 * n + 1)
            * (16 * n + 15)
            * (16 * n + 13)
            * (16 * n + 11)
            * (16 * n + 9)
            * (16 * n + 7)
            * (16 * n + 5)
            * (16 * n + 3)
            * (16 * n + 1)
            * (6 * n + 5)
            * (6 * n + 1)
            * (5 * n + 4)
            * (5 * n + 3)
            * (5 * n + 2)
            * (5 * n + 1)
            * (4 * n + 3)
            * (4 * n + 1)
            * (3 * n + 2) ** 2
            * (3 * n + 1) ** 2
            * (2 * n + 1) ** 2
            * (n + 1) ** 4
        )
        A = (
            lambda n: 1280
            * (
                53628224743754956800 * n**12
                + 321769348462529740800 * n**11
                + 870819861824030048256 * n**10
                + 1404546948213627617280 * n**9
                + 1502430421902838706176 * n**8
                + 1121902831417416269824 * n**7
                + 599111217238406749184 * n**6
                + 230308091163672146944 * n**5
                + 63188311383792937664 * n**4
                + 12053960931776285056 * n**3
                + 1515824885918601280 * n**2
                + 112681789719939456 * n
                + 3739293263041605
            )
            * (n + 1) ** 4
        )
        C = (
            lambda n: 3840
            * (
                5800770845505906278400 * n**14
                + 35244683550970368491520 * n**13
                + 96843270346395014135808 * n**12
                + 159127458485160095907840 * n**11
                + 174192211967093702426624 * n**10
                + 133930111580070566608896 * n**9
                + 74276921936007836356608 * n**8
                + 30027610230190892384256 * n**7
                + 8831643542776225168896 * n**6
                + 1863544358733610466304 * n**5
                + 274207015176128668864 * n**4
                + 26795291904488373024 * n**3
                + 1602701161535462760 * n**2
                + 51099153092687700 * n
                + 680391870283125
            )
            * (n + 1) ** 4
        )
        D = (
            lambda n: -627448373788702408704000 * n**16
            - 5019586990309619269632000 * n**15
            - 18391432395269564195143680 * n**14
            - 40897254436468612147445760 * n**13
            - 61658083472933792949207040 * n**12
            - 66675401222598476546703360 * n**11
            - 53351815000864249485721600 * n**10
            - 32118344854440838966804480 * n**9
            - 14642687844165168961822720 * n**8
            - 5046538144294635372052480 * n**7
            - 1301883449482921019688960 * n**6
            - 246576812550898187868160 * n**5
            - 33208257773591953443840 * n**4
            - 3022272220593959055360 * n**3
            - 171197085947887604160 * n**2
            - 5258480264411774400 * n
            - 68131803107993625
        )

        deg = 16  # the degree of D(n),A(n)

        a_iterator = iter_series_items_from_func(
            lambda n: (C(n) * A(n + 1) + C(n + 1) * D(n)), 2000, 0
        )
        b_iterator = iter_series_items_from_func(
            lambda n: -C(n - 1) * C(n + 1) * B(n), 2000, 0
        )

        lhs = 12295686865411643534738525251090825976217600000000 / (
            -27698468615123 + 30239638679250 * sympy.Catalan
        )
        self._test_large_catalan(a_iterator, b_iterator, deg, lhs)

    def test_8756(self):
        print("starting test 8756 large catalan expression:")
        B = (
            lambda n: 974098582732800
            * (18 * n - 1)
            * (18 * n - 5)
            * (18 * n - 7)
            * (18 * n - 11)
            * (18 * n - 13)
            * (18 * n - 17)
            * (16 * n - 1)
            * (16 * n - 3)
            * (16 * n - 5)
            * (16 * n - 7)
            * (16 * n - 9)
            * (16 * n - 11)
            * (16 * n - 13)
            * (16 * n - 15)
            * (12 * n - 1)
            * (12 * n - 5)
            * (12 * n - 7)
            * (12 * n - 11)
            * (10 * n - 1)
            * (10 * n - 3)
            * (10 * n - 7)
            * (10 * n - 9)
            * (8 * n - 1)
            * (8 * n - 3)
            * (8 * n - 5)
            * (8 * n - 7)
            * (7 * n - 1)
            * (7 * n - 2)
            * (7 * n - 3)
            * (7 * n - 4)
            * (7 * n - 5)
            * (7 * n - 6)
            * (5 * n - 1)
            * (5 * n - 2)
            * (5 * n - 3)
            * (5 * n - 4)
            * (3 * n - 1)
            * (3 * n - 2)
            * (2 * n - 1) ** 2
            * n**4
        )

        A = (
            lambda n: -8960
            * (
                73983951155770878724367450112 * n**18
                - 665855560401937908519307051008 * n**17
                + 2792184679150262839449361055744 * n**16
                - 7244751397424843455823928623104 * n**15
                + 13025953158228036117395095273472 * n**14
                - 17223063777881899754045275389952 * n**13
                + 17342791233836162549269898350592 * n**12
                - 13587668408278285355997084688384 * n**11
                + 8389405273631815771405115063296 * n**10
                - 4108500251036580616258348547072 * n**9
                + 1597903449775698688636187440384 * n**8
                - 491769995448186553947353861120 * n**7
                + 118706249854184444631933223744 * n**6
                - 22134557976628166169069714368 * n**5
                + 3112627273590992518228314480 * n**4
                - 317893182330145918407813792 * n**3
                + 22157211115262198945287476 * n**2
                - 938485945587550355770500 * n
                + 18143491961047372190775
            )
            * n**4
        )
        C = (
            lambda n: -26880
            * (
                11501111578663754781300690518016 * n**20
                - 125810550507183420035578686603264 * n**19
                + 645575550204588303485077431517184 * n**18
                - 2065184169581115447694523180777472 * n**17
                + 4616805523450179672798408357117952 * n**16
                - 7662675613706981456356548328292352 * n**15
                + 9791420424669548609089093469011968 * n**14
                - 9857241645460327020509405968564224 * n**13
                + 7934768245759979397680474656391168 * n**12
                - 5153527482019164244823824176414720 * n**11
                + 2713060889894389862882536563945472 * n**10
                - 1158624351031097932344335294171136 * n**9
                + 400246754105652389828842411743744 * n**8
                - 111102823161640812211772030696448 * n**7
                + 24506814194490292525528579356416 * n**6
                - 4223004337406890009236732759168 * n**5
                + 554232046474808802923669725120 * n**4
                - 53290485852757210244451465216 * n**3
                + 3524383897165301802741174960 * n**2
                - 142645797442797665837751000 * n
                + 2652004508424368995587375
            )
            * n**4
        )
        D = (
            lambda n: 5363686264864100432031229478436864 * n**22
            - 59000548913505104752343524262805504 * n**21
            + 304658581597463374987052062196367360 * n**20
            - 981566604001955083538497272765480960 * n**19
            + 2212243965883810843401108312676368384 * n**18
            - 3706156987142846107855335630700806144 * n**17
            + 4787082185603832090051172544005079040 * n**16
            - 4880128483730146395501120349911121920 * n**15
            + 3986671256102350556975989377915224064 * n**14
            - 2634935069146824770029166425668255744 * n**13
            + 1416528129862581136381193639128350720 * n**12
            - 620531636250370168454156783939911680 * n**11
            + 221201095879692650910269786090379264 * n**10
            - 63873108979199697326165628599384064 * n**9
            + 14821248577777211756973204076992000 * n**8
            - 2730630460965196719054056024279040 * n**7
            + 392663106246544509792258005639424 * n**6
            - 43028437265738968007777076428544 * n**5
            + 3473857218292431926963634290880 * n**4
            - 196780037563808265370019126400 * n**3
            + 7261522720611369328104304500 * n**2
            - 154243695496765886343832500 * n
            + 1447655089494188778328125
        )
        deg = 22

        a_iterator = iter_series_items_from_func(
            lambda n: (C(n + 1) * A(n + 2) + C(n + 2) * D(n + 1)), 2000, 0
        )
        b_iterator = iter_series_items_from_func(
            lambda n: -C(n) * C(n + 2) * B(n + 1), 2000, 0
        )

        lhs = 716788855031296198695698971638683237217898375537365803335680000000000 / (
            426654719836504931 - 465797757632857650 * sympy.Catalan
        )
        self._test_large_catalan(a_iterator, b_iterator, deg, lhs)
